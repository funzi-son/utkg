"""
t-norm computation
#Son N. Tran
"""
import numpy as np

def prod_snorm(clause):
    """
    product-s-norm = x+y-x 
    """
def lukasiewicz_min(clause):
    """
    lukasiewicz_min = min(x+y,1)

    clause is a 2-dimensional array where clause[i][0] is the
    sign of literal i (0 negative,1 positive) and the clause[i][1] 
    is the literal's value 
    """
    print(clause)
    lmin = 0
    for i in range(len(clause)):
        print((clause[i][0],clause[i][1]))
        lmin += (1-clause[i][0] + (2*clause[i][0]-1)*clause[i][1])

    lmin  =  min(lmin,1)
    print(lmin)
    input("")
    return lmin


if __name__=="__main__":
    """
    a AND b THEN c
    """
    data = None
    # Truth values
    t = []
    # tnorm
    clause = [[0,-1],[0,-1],[1,-1]]
    k =  []
    for a in [0,1]:
        for b in [0,1]:
            for c in [0,1]:
                assignment = np.array([[a,b,c]])
                if data is None:
                    data = assignment
                else:
                    data = np.append(data,assignment,axis=0)

    
                # compute truth
                if a==1 and b==1 and c==0:          
                    t.append(1)
                else:
                    t.append(0)

                # t-norm
                clause[0][1] = a
                clause[1][1] = b
                clause[2][1] = c

                k.append(lukasiewicz_min(clause))

    print(t)
    print(k)

                
